apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-deployment
spec:
  selector:
    matchLabels:
      app: controller
  template:
    metadata:
      labels:
        app: controller
    spec:
      # 'mount' /etc/krm/setup on start
      # https://stackoverflow.com/questions/30538210/how-to-mimic-volumes-from-in-kubernetes
      initContainers:
      - name: graph-setup-init
        image: gcr.io/ucdlib-pubreg/casita-krm-graph-setup:v0.0.1
        imagePullPolicy: Always
        command: ["/bin/sh"]
        args: ["-c", "cp -r /setup/* /mnt/setup"]
        volumeMounts:
        - mountPath: /mnt/setup
          name: graph-setup-volume
      containers:
      - name: controller
        image: gcr.io/ucdlib-pubreg/krm-controller:dev
        imagePullPolicy: Always
        env:
        - name: KRM_ENV
          value: "gce-prod"
        - name: LOG_LEVEL
          value: "warn"
        - name: MONGO_HOST
          value: "mongo-service"
        - name: KAFKA_HOST
          value: "kafka-service"
        resources:
          limits:
            memory: "1Gi"
            cpu: "1"
          requests:
            memory: "128Mi"
            cpu: "100m"
        volumeMounts:
        - mountPath: /storage/nfs
          name: nfspsc
        - mountPath: /etc/google
          name: service-account
        - mountPath: /etc/krm/setup
          name: graph-setup-volume
      volumes:
      - name: nfspsc
        persistentVolumeClaim:
          claimName: nfs-persistent-storage-claim
          readOnly: false
      - name: graph-setup-volume
        emptyDir: {}
      - name: service-account
        secret:
          secretName: service-account
      nodeSelector:
        intendedfor: krm-services
