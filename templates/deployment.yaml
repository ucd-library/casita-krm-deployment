version: '3'
services:

  zookeeper:
    image: {{ZOOKEEPER_IMAGE_NAME}}:{{ZOOKEEPER_TAG}}
    environment: 
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper-data:/data
      - zookeeper-datalog:/datalog

  kafka:
    image: {{KAFKA_IMAGE_NAME}}:{{KAFKA_TAG}}
    env_file:
      - .env
    environment: 
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CLIENT_USER=admin
    volumes: 
      - kafka-data:/bitnami/kafka
    depends_on:
      - "zookeeper"

  ksqldb:
    image: confluentinc/ksqldb-server:0.12.0
    hostname: ksqldb
    container_name: ksqldb
    depends_on:
      - kafka
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka:9092

  mongo:
    image: {{MONGO_IMAGE_NAME}}:{{MONGO_TAG}}
    volumes:
      - mongo-data:/data/db

  rabbitmq:
    image: {{RABBITMQ_IMAGE_NAME}}:{{RABBITMQ_TAG}}
    ports:
      - "15672:15672" # guest/guest

  controller:
    image: {{CONTROLLER_IMAGE_NAME}}:{{KRM_TAG}}
    env_file:
      - .env
    volumes:
      - ./storage:/storage/nfs
      - ./graph:/etc/krm/graph
      - ${GCLOUD_SERVICE_ACCOUNT_MOUNT:-service-account}:/etc/google/service-account.json
    restart: always

  api:
    image: {{API_IMAGE_NAME}}:{{KRM_TAG}}
    env_file:
      - .env
    volumes:
      - ./storage:/storage/nfs
      - ${GCLOUD_SERVICE_ACCOUNT_MOUNT:-service-account}:/etc/google/service-account.json
    ports:
      - "${HOST_PORT:-3000}:3000"
    environment:
      - "API_SERVICES=ws-service:ws stream-status-service:status"
    restart: always

  expire:
    image: {{EXPIRE_IMAGE_NAME}}:{{KRM_TAG}}
    env_file:
      - .env
    volumes:
      - ./storage:/storage/nfs
      - ${GCLOUD_SERVICE_ACCOUNT_MOUNT:-service-account}:/etc/google/service-account.json
    restart: always

  router:
    image: {{ROUTER_IMAGE_NAME}}:{{KRM_TAG}}
    env_file:
      - .env
    volumes:
      - ./graph:/etc/krm/graph
      - ${GCLOUD_SERVICE_ACCOUNT_MOUNT:-service-account}:/etc/google/service-account.json
    restart: always

  ws-service:
    image: {{WS_SERVICE_IMAGE_NAME}}:{{CASITA_TASKS_TAG}}
    env_file:
      - .env
    restart: always

  default-worker:
    image: {{WORKER_IMAGE_NAME}}:{{KRM_TAG}}
    env_file:
      - .env
    volumes:
      - ./storage:/storage/nfs
      - ${GCLOUD_SERVICE_ACCOUNT_MOUNT:-service-account}:/etc/google/service-account.json
    environment:
      - WORKER_TYPE=default.worker
    restart: always


  image-worker:
    image: {{NODE_IMAGE_WORKER_IMAGE_NAME}}:{{CASITA_TASKS_TAG}}
    env_file:
      - .env
    volumes:
      - ./storage:/storage/nfs
      - ${GCLOUD_SERVICE_ACCOUNT_MOUNT:-service-account}:/etc/google/service-account.json
    environment:
      - WORKER_TYPE=node.image.worker
    restart: always

  generic-payload-worker:
    image: {{GENERIC_PAYLOAD_WORKER_IMAGE_NAME}}:{{CASITA_TASKS_TAG}}
    env_file:
      - .env
    volumes:
      - ./storage:/storage/nfs
    environment:
      - WORKER_TYPE=generic.payload.worker
    restart: always

  stream-status-worker:
    image: {{NODE_STREAM_STATUS_WORKER_IMAGE_NAME}}:{{CASITA_TASKS_TAG}}
    env_file:
      - .env
    volumes:
      - ./storage:/storage/nfs
    environment:
      - WORKER_TYPE=node.status.worker
    restart: always

  stream-status-service:
    image: {{NODE_STREAM_STATUS_SERVICE_IMAGE_NAME}}:{{CASITA_TASKS_TAG}}
    env_file:
      - .env
    volumes:
      - ./storage:/storage/nfs
    restart: always

  decoder-krm-interface:
    image: {{DECORDER_KRM_INTERFACE_IMAGE_NAME}}:{{CASITA_TASKS_TAG}}
    env_file:
      - .env
    volumes:
      - ./storage:/storage/nfs
    restart: always

  secdecoder-krm-interface:
    image: {{DECORDER_KRM_INTERFACE_IMAGE_NAME}}:{{CASITA_TASKS_TAG}}
    env_file:
      - .env
    volumes:
      - ./storage:/storage/nfs
    restart: always

  decoder:
    image: {{GRB_DECORDER_IMAGE_NAME}}:{{CASITA_TASKS_TAG}}
    env_file:
      - .env
    environment:
      - GRB_FILE=decoded
      - TARGET_URL=http://decoder-krm-interface:3000
    volumes:
      - ./docker.key:/root/.ssh/id_rsa
    restart: always

  secdecoder:
    image: {{GRB_DECORDER_IMAGE_NAME}}:{{CASITA_TASKS_TAG}}
    env_file:
      - .env
    environment:
      - GRB_FILE=secdecoded
      - TARGET_URL=http://secdecoder-krm-interface:3000
    volumes:
      - ./docker.key:/root/.ssh/id_rsa
    restart: always

volumes:
  kafka-data:
  zookeeper-data:
  zookeeper-datalog:
  mongo-data:
  service-account: