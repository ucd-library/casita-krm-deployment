version: '3'
services:

  zookeeper:
    image: {{ZOOKEEPER_IMAGE_NAME}}:{{ZOOKEEPER_TAG}}
    environment: 
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper-data:/data
      - zookeeper-datalog:/datalog

  kafka:
    image: {{KAFKA_IMAGE_NAME}}:{{KAFKA_TAG}}
    env_file:
      - .env
    environment: 
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CLIENT_USER=admin
    volumes: 
      - kafka-data:/bitnami/kafka
    depends_on:
      - "zookeeper"

  mongo:
    image: {{MONGO_IMAGE_NAME}}:{{MONGO_TAG}}
    volumes:
      - mongo-data:/data/db

  rabbitmq:
    image: {{RABBITMQ_IMAGE_NAME}}:{{RABBITMQ_TAG}}
    ports:
      - "5672:5672"
      - "15672:15672" # guest/guest

  controller:
    image: {{CONTROLLER_IMAGE_NAME}}:{{KRM_TAG}}
    volumes:
      - ./storage/storage/nfs
      - ./graph:/etc/krm/graph
      - ../{{REPOSITORY_DIR}}/{{KRM_REPO_NAME}}/controller/index.js:/service/index.js
      - ../{{REPOSITORY_DIR}}/{{KRM_REPO_NAME}}/controller/lib:/service/lib
    ports:
      - "3000:3000"
  # command: bash -c 'tail -f /dev/null'

  router:
    image: {{ROUTER_IMAGE_NAME}}:{{KRM_TAG}}
    volumes:
      - ../{{REPOSITORY_DIR}}/{{KRM_REPO_NAME}}/router/index.js:/service/index.js
      - ./graph:/etc/krm/graph
  # command: bash -c 'tail -f /dev/null'

  default-worker:
    image: {{WORKER_IMAGE_NAME}}:{{KRM_TAG}}
    volumes:
      - ./storage/storage/nfs
      - ../{{REPOSITORY_DIR}}/{{KRM_REPO_NAME}}/worker/index.js:/service/index.js
      - ../{{REPOSITORY_DIR}}/{{KRM_REPO_NAME}}/worker/lib:/service/lib
    environment:
      - WORKER_TYPE=default.worker
  # command: bash -c 'tail -f /dev/null'

  image-worker:
    image: {{WORKER_IMAGE_NAME}}:{{KRM_TAG}}
    volumes:
      - ./storage/storage/nfs
      - ../{{REPOSITORY_DIR}}/{{KRM_REPO_NAME}}/worker/index.js:/service/index.js
      - ../{{REPOSITORY_DIR}}/{{KRM_REPO_NAME}}/worker/lib:/service/lib
    environment:
      - WORKER_TYPE=node.image.worker

  decoder:
    image: {{GRB_DECORDER_IMAGE_NAME}}:{{CASITA_TASKS_TAG}}
    environment:
      - GRB_FILE=decoded
      - TARGET_URL=http://decoder-krm-interface:3000
    volumes:
      - ../{{REPOSITORY_DIR}}/{{CASITA_TASKS_REPO_NAME}}/decoder/index.js:/service/index.js
      - ../{{REPOSITORY_DIR}}/{{CASITA_TASKS_REPO_NAME}}/decoder/test.js:/service/test.js
      - ../docker.key:/root/.ssh/id_rsa
      - ./testsecdecorded.dat:/service/testsecdecorded.dat
    restart: always
  # command: bash -c 'tail -f /dev/null'

  decoder-krm-interface:
    image: {{DECORDER_KRM_INTERFACE_IMAGE_NAME}}:{{CASITA_TASKS_TAG}}
    environment:
      - GRB_FILE=decoded
    volumes:
      - ../{{REPOSITORY_DIR}}/{{CASITA_TASKS_REPO_NAME}}/decoder-krm-interface/index.js:/service/index.js
  # command: bash -c 'tail -f /dev/null'

  # secdecoder:
  #   image: {{GRB_DECORDER_IMAGE_NAME}}:{{GRB_DECORDER_TAG}}
  #   environment:
  #     - GRB_FILE=secdecoded
  #   volumes:
  #     - ../docker.key:/root/.ssh/id_rsa
  #   restart: always

volumes:
  kafka-data:
  zookeeper-data:
  zookeeper-datalog:
  mongo-data: